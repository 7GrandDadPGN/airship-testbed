-- Compiled with unity-ts v2.1.0-57
-- eslint-disable @typescript-eslint/no-explicit-any
-- eslint-disable roblox-ts/no-any
--[[
	* Design doc: https://docs.google.com/document/d/1QJDGuAdNsofankTVZbzXwTQ8zMxhpNsEJQlgLRY54FI/edit?usp=sharing
]]
local Object = require("Shared/rbxts_include/node_modules/@easy-games/unity-object-utils/init")
local _event_template = require("./../event-template")
local EventConnection = _event_template.EventConnection
local EventTemplate = _event_template.EventTemplate
local MapUtil = require("./../lib/map-util").MapUtil
local _sync_event_priority = require("./../sync-event-priority")
local SyncEventPriority = _sync_event_priority.SyncEventPriority
local SyncEventPriorityOrdered = _sync_event_priority.SyncEventPriorityOrdered
local ParameterizedSyncEventBuilder
local ParameterizedSyncEvent
do
	local super = EventTemplate
	ParameterizedSyncEvent = setmetatable({}, {
		__tostring = function()
			return "ParameterizedSyncEvent"
		end,
		__index = super,
	})
	ParameterizedSyncEvent.__index = ParameterizedSyncEvent
	function ParameterizedSyncEvent.new(...)
		local self = setmetatable({}, ParameterizedSyncEvent)
		return self:constructor(...) or self
	end
	function ParameterizedSyncEvent:constructor(...)
		super.constructor(self, ...)
		self.entries = {}
		self.listenedParameters = {}
	end
	function ParameterizedSyncEvent:connect(callback, parameters, priority, additionalDebugThreadLevels)
		if priority == nil then
			priority = SyncEventPriority.NORMAL
		end
		if additionalDebugThreadLevels == nil then
			additionalDebugThreadLevels = 0
		end
		local id = System.Guid:NewGuid():ToString()
		local _fn = self
		local _condition = parameters
		if _condition == nil then
			_condition = {}
		end
		local encodedParameters = _fn:encodeParameters(_condition, true)
		local eventIdMap = MapUtil.getOrCreate(self.entries, encodedParameters, {})
		local _arg1 = {
			priority = priority,
			callbackInfo = {
				callback = callback,
				callingThreadInfo = self:getCallingThreadInfo(additionalDebugThreadLevels),
			},
		}
		eventIdMap[id] = _arg1
		-- Likely not important, but we do not clear listened parameters when destroying listener
		local destroyFunction = EventConnection.new(function()
			eventIdMap[id] = nil
			-- ▼ ReadonlyMap.size ▼
			local _size = 0
			for _ in eventIdMap do
				_size += 1
			end
			-- ▲ ReadonlyMap.size ▲
			if _size == 0 then
				self.entries[encodedParameters] = nil
			end
		end)
		return destroyFunction
	end
	function ParameterizedSyncEvent:fire(...)
		local params = { ... }
		local event = self:constructEvent(params)
		local entryList = {}
		for _, listenedParameters in MapUtil.values(self.listenedParameters) do
			local reducedParameters = self:reduceParameters(event:getParameters(), listenedParameters)
			local encodedParams = self:encodeParameters(reducedParameters, false)
			local eventMap = self.entries[encodedParams]
			if not eventMap then
				continue
			end
			for _1, event in MapUtil.values(eventMap) do
				local syncEventList = MapUtil.getOrCreate(entryList, event.priority, {})
				table.insert(syncEventList, event)
			end
		end
		for _, priority in SyncEventPriorityOrdered do
			local priorityEntries = entryList[priority] or {}
			for _1, entry in priorityEntries do
				self:wrapCallback(entry.callbackInfo.callingThreadInfo, function()
					entry.callbackInfo.callback(event)
				end)
			end
		end
		return event
	end
	function ParameterizedSyncEvent:reduceParameters(parameters, desiredParameters)
		local result = {}
		for _, key in desiredParameters do
			-- Bad replacement for parameters[key] because it won't compile
			result[key] = parameters[key]
		end
		return result
	end
	function ParameterizedSyncEvent:quickInspect(obj)
		-- TODO This is incredbily simple and should be expanded
		local response = {}
		for _, key in Object.keys(obj) do
			table.insert(response, key)
			table.insert(response, "::")
			local _arg0 = tostring((obj[key]))
			table.insert(response, _arg0)
		end
		return table.concat(response, "")
	end
	function ParameterizedSyncEvent:encodeParameters(parameters, addListener)
		local _exp = (Object.keys(parameters))
		table.sort(_exp)
		local orderedKeys = _exp
		if addListener then
			local _listenedParameters = self.listenedParameters
			local _arg0 = self:quickInspect(orderedKeys)
			_listenedParameters[_arg0] = orderedKeys
		end
		local orderedParameters = {}
		for _, key in orderedKeys do
			table.insert(orderedParameters, key)
			local _arg0 = parameters[key]
			table.insert(orderedParameters, _arg0)
		end
		local response = self:quickInspect(orderedParameters)
		return response
	end
	function ParameterizedSyncEvent:setParameters(parameters)
		return ParameterizedSyncEventBuilder.new(self):setParameters(parameters)
	end
	function ParameterizedSyncEvent:setPriority(priority)
		return ParameterizedSyncEventBuilder.new(self):setPriority(priority)
	end
end
do
	ParameterizedSyncEventBuilder = setmetatable({}, {
		__tostring = function()
			return "ParameterizedSyncEventBuilder"
		end,
	})
	ParameterizedSyncEventBuilder.__index = ParameterizedSyncEventBuilder
	function ParameterizedSyncEventBuilder.new(...)
		local self = setmetatable({}, ParameterizedSyncEventBuilder)
		return self:constructor(...) or self
	end
	function ParameterizedSyncEventBuilder:constructor(eventObject)
		self.eventObject = eventObject
	end
	function ParameterizedSyncEventBuilder:setParameters(parameters)
		self.parameters = parameters
		return self
	end
	function ParameterizedSyncEventBuilder:setPriority(priority)
		self.priority = priority
		return self
	end
	function ParameterizedSyncEventBuilder:connect(callback)
		return self.eventObject:connect(callback, self.parameters, self.priority, 1)
	end
	function ParameterizedSyncEventBuilder:fire(...)
		local params = { ... }
		return self.eventObject:fire(unpack(params))
	end
end
return {
	ParameterizedSyncEvent = ParameterizedSyncEvent,
}
-- ----------------------------------
-- ----------------------------------
