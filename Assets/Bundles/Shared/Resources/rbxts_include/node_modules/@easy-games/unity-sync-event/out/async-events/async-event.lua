-- Compiled with unity-ts v2.1.0-57
local TS = require("Shared/include/RuntimeLib")
-- eslint-disable @typescript-eslint/no-explicit-any
local _event_template = require("./../event-template")
local EventConnection = _event_template.EventConnection
local EventTemplate = _event_template.EventTemplate
local MapUtil = require("./../lib/map-util").MapUtil
local AsyncEvent
do
	local super = EventTemplate
	AsyncEvent = setmetatable({}, {
		__tostring = function()
			return "AsyncEvent"
		end,
		__index = super,
	})
	AsyncEvent.__index = AsyncEvent
	function AsyncEvent.new(...)
		local self = setmetatable({}, AsyncEvent)
		return self:constructor(...) or self
	end
	function AsyncEvent:constructor(...)
		super.constructor(self, ...)
		self.entries = {}
	end
	function AsyncEvent:connect(callback, additionalDebugThreadLevels)
		if additionalDebugThreadLevels == nil then
			additionalDebugThreadLevels = 0
		end
		local id = System.Guid:NewGuid():ToString()
		self:insertEntry({
			id = id,
			callbackInfo = {
				callback = callback,
				callingThreadInfo = self:getCallingThreadInfo(additionalDebugThreadLevels),
			},
		})
		return EventConnection.new(function()
			self.entries[id] = nil
		end)
	end
	AsyncEvent.fire = TS.async(function(self, ...)
		local params = { ... }
		local event = self:constructEvent(params)
		local entryList = MapUtil.values(self.entries)
		local callbackPromises = {}
		for _, entry in entryList do
			local _promise = TS.Promise.new(function(resolve)
				self:wrapCallback(entry.callbackInfo.callingThreadInfo, function()
					entry.callbackInfo.callback(event)
				end)
				resolve()
			end)
			table.insert(callbackPromises, _promise)
		end
		return TS.Promise.all(callbackPromises)
	end)
	function AsyncEvent:insertEntry(entry)
		local _entries = self.entries
		local _id = entry.id
		local _entry = entry
		_entries[_id] = _entry
	end
end
return {
	AsyncEvent = AsyncEvent,
}
-- ----------------------------------
-- ----------------------------------
