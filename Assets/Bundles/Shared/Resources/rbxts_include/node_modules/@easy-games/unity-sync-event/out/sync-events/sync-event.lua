-- Compiled with unity-ts v2.1.0-57
-- eslint-disable @typescript-eslint/no-explicit-any
local _event_template = require("./../event-template")
local EventConnection = _event_template.EventConnection
local EventTemplate = _event_template.EventTemplate
local MapUtil = require("./../lib/map-util").MapUtil
local SyncEventPriority = require("./../sync-event-priority").SyncEventPriority
local SyncEventBuilder
local SyncEvent
do
	local super = EventTemplate
	SyncEvent = setmetatable({}, {
		__tostring = function()
			return "SyncEvent"
		end,
		__index = super,
	})
	SyncEvent.__index = SyncEvent
	function SyncEvent.new(...)
		local self = setmetatable({}, SyncEvent)
		return self:constructor(...) or self
	end
	function SyncEvent:constructor(...)
		super.constructor(self, ...)
		self.entries = {}
		self.sortedEntries = {
			entries = {},
			isSorted = true,
		}
		self.idCounter = 1
	end
	function SyncEvent:connect(callback, priority, additionalDebugThreadLevels)
		if priority == nil then
			priority = SyncEventPriority.NORMAL
		end
		if additionalDebugThreadLevels == nil then
			additionalDebugThreadLevels = 0
		end
		local id = tostring(self.idCounter)
		self.idCounter += 1
		self:insertSyncEventEntry({
			id = id,
			priority = priority,
			callbackInfo = {
				callback = callback,
				callingThreadInfo = self:getCallingThreadInfo(additionalDebugThreadLevels),
			},
		})
		return EventConnection.new(function()
			self.sortedEntries.isSorted = false
			self.entries[id] = nil
		end)
	end
	function SyncEvent:fire(...)
		local params = { ... }
		local event = self:constructEvent(params)
		return self:fireEvent(event)
	end
	function SyncEvent:fireEvent(event)
		local entryList = self:getPrioritySortedEntries()
		for _, entry in entryList do
			self:wrapCallback(entry.callbackInfo.callingThreadInfo, function()
				entry.callbackInfo.callback(event)
			end)
		end
		return event
	end
	function SyncEvent:insertSyncEventEntry(entry)
		self.sortedEntries.isSorted = false
		local _entries = self.entries
		local _id = entry.id
		local _entry = entry
		_entries[_id] = _entry
	end
	function SyncEvent:setPriority(priority)
		return SyncEventBuilder.new(self):setPriority(priority)
	end
	function SyncEvent:getPrioritySortedEntries()
		-- Sort entries
		if not self.sortedEntries.isSorted then
			self.sortedEntries.entries = MapUtil.values(self.entries)
			local _entries = self.sortedEntries.entries
			local _arg0 = function(a, b)
				return a.priority < b.priority
			end
			table.sort(_entries, _arg0)
			self.sortedEntries.entries = _entries
			self.sortedEntries.isSorted = true
		end
		return self.sortedEntries.entries
	end
end
do
	SyncEventBuilder = setmetatable({}, {
		__tostring = function()
			return "SyncEventBuilder"
		end,
	})
	SyncEventBuilder.__index = SyncEventBuilder
	function SyncEventBuilder.new(...)
		local self = setmetatable({}, SyncEventBuilder)
		return self:constructor(...) or self
	end
	function SyncEventBuilder:constructor(eventObject)
		self.eventObject = eventObject
	end
	function SyncEventBuilder:setPriority(priority)
		self.priority = priority
		return self
	end
	function SyncEventBuilder:connect(callback)
		return self.eventObject:connect(callback, self.priority, 1)
	end
	function SyncEventBuilder:fire(...)
		local params = { ... }
		return self.eventObject:fire(unpack(params))
	end
end
return {
	SyncEvent = SyncEvent,
}
-- ----------------------------------
-- ----------------------------------
